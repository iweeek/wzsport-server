package com.wzsport.mapper;

import com.wzsport.model.RunningActivityData;
import com.wzsport.model.RunningActivityDataExample;

import java.util.Date;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.Update;

public interface RunningActivityDataMapper {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table wzsport_running_activity_data
	 * @mbg.generated  Mon Apr 16 11:29:36 CST 2018
	 */
	long countByExample(RunningActivityDataExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table wzsport_running_activity_data
	 * @mbg.generated  Mon Apr 16 11:29:36 CST 2018
	 */
	int deleteByExample(RunningActivityDataExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table wzsport_running_activity_data
	 * @mbg.generated  Mon Apr 16 11:29:36 CST 2018
	 */
	@Delete({ "delete from wzsport_running_activity_data", "where id = #{id,jdbcType=BIGINT}" })
	int deleteByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table wzsport_running_activity_data
	 * @mbg.generated  Mon Apr 16 11:29:36 CST 2018
	 */
	@Insert({ "insert into wzsport_running_activity_data (activity_id, acquisition_time, ",
			"step_count, step_count_cal, ", "distance, distance_per_step, ", "step_per_second, longitude, ",
			"latitude, location_type, ", "is_normal)",
			"values (#{activityId,jdbcType=BIGINT}, #{acquisitionTime,jdbcType=TIMESTAMP}, ",
			"#{stepCount,jdbcType=SMALLINT}, #{stepCountCal,jdbcType=SMALLINT}, ",
			"#{distance,jdbcType=SMALLINT}, #{distancePerStep,jdbcType=DECIMAL}, ",
			"#{stepPerSecond,jdbcType=DECIMAL}, #{longitude,jdbcType=DECIMAL}, ",
			"#{latitude,jdbcType=DECIMAL}, #{locationType,jdbcType=TINYINT}, ", "#{isNormal,jdbcType=BIT})" })
	@SelectKey(statement = "SELECT LAST_INSERT_ID()", keyProperty = "id", before = false, resultType = Long.class)
	int insert(RunningActivityData record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table wzsport_running_activity_data
	 * @mbg.generated  Mon Apr 16 11:29:36 CST 2018
	 */
	int insertSelective(RunningActivityData record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table wzsport_running_activity_data
	 * @mbg.generated  Mon Apr 16 11:29:36 CST 2018
	 */
	List<RunningActivityData> selectByExample(RunningActivityDataExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table wzsport_running_activity_data
	 * @mbg.generated  Mon Apr 16 11:29:36 CST 2018
	 */
	@Select({ "select", "id, activity_id, acquisition_time, step_count, step_count_cal, distance, distance_per_step, ",
			"step_per_second, longitude, latitude, location_type, is_normal", "from wzsport_running_activity_data",
			"where id = #{id,jdbcType=BIGINT}" })
	@ResultMap("com.wzsport.mapper.RunningActivityDataMapper.BaseResultMap")
	RunningActivityData selectByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table wzsport_running_activity_data
	 * @mbg.generated  Mon Apr 16 11:29:36 CST 2018
	 */
	int updateByExampleSelective(@Param("record") RunningActivityData record,
			@Param("example") RunningActivityDataExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table wzsport_running_activity_data
	 * @mbg.generated  Mon Apr 16 11:29:36 CST 2018
	 */
	int updateByExample(@Param("record") RunningActivityData record,
			@Param("example") RunningActivityDataExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table wzsport_running_activity_data
	 * @mbg.generated  Mon Apr 16 11:29:36 CST 2018
	 */
	int updateByPrimaryKeySelective(RunningActivityData record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table wzsport_running_activity_data
	 * @mbg.generated  Mon Apr 16 11:29:36 CST 2018
	 */
	@Update({ "update wzsport_running_activity_data", "set activity_id = #{activityId,jdbcType=BIGINT},",
			"acquisition_time = #{acquisitionTime,jdbcType=TIMESTAMP},", "step_count = #{stepCount,jdbcType=SMALLINT},",
			"step_count_cal = #{stepCountCal,jdbcType=SMALLINT},", "distance = #{distance,jdbcType=SMALLINT},",
			"distance_per_step = #{distancePerStep,jdbcType=DECIMAL},",
			"step_per_second = #{stepPerSecond,jdbcType=DECIMAL},", "longitude = #{longitude,jdbcType=DECIMAL},",
			"latitude = #{latitude,jdbcType=DECIMAL},", "location_type = #{locationType,jdbcType=TINYINT},",
			"is_normal = #{isNormal,jdbcType=BIT}", "where id = #{id,jdbcType=BIGINT}" })
	int updateByPrimaryKey(RunningActivityData record);
	
	
	@Select({ "SELECT * from wzsport_student_statistic_view  as c \n" + 
			"join (select AVG(longitude) as longitude, AVG(latitude) as latitude, \n" + 
			"		b.activity_id, b.acquisition_time, a.student_id, b.id\n" + 
			"		from \n" + 
			"			wzsport_running_activity as a \n" + 
			"			join wzsport_running_activity_data as b\n" + 
			"			on a.id = b.activity_id\n" + 
			"		where\n" + 
			"		b.created_at BETWEEN #{start} AND #{end} \n" + 
			"		and a.qualified = 1 and a.is_valid = 1 and a.is_verified = 1 \n" +
			"		group by activity_id\n" + 
			"		HAVING STDDEV(b.distance_per_step) > 0.1402747724144255 and STDDEV(b.distance_per_step) < 0.1492747724144255\n" + 
			"		and STDDEV(b.step_per_second) > 0.2700768588928806 and STDDEV(b.step_per_second) < 0.2830768588928806\n" + 
			"		) as d \n" +
			"		on c.student_id = d.student_id \n" +
			"where c.university_id = 1" })
	@ResultMap("com.wzsport.mapper.RunningActivityDataMapper.BaseResultMap")
	List<RunningActivityData> selectByAVGPosition(@Param("start")  Date start,@Param("end")  Date end);
	
}